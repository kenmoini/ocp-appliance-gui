---
- name: Build an OpenShift Appliance release image
  hosts: all
  vars:
    # Required Inputs
    #release_image_name: 4.19-standard
    #pullSecret: '{{ lookup("file", "/opt/.pull-secret.json") }}'
    #pull_secret_path: /opt/.pull-secret.json
    #appliance_bundle_type: base # base|virt|management|ai|sno|developer

    # Optional Inputs
    openshift_version: '4.19'
    fipsMode: false

    # Defaults
    appliance_image: quay.io/edge-infrastructure/openshift-appliance@sha256:2a1187cdde61679e87e770c92efff997d02abc6d95bd1a61d6636d5859e83e27

    appliance_graph_path: /opt/var/lib/containers
    appliance_base_path: /opt/appliance-builds

    enableDefaultSources: false
    useDefaultSourceNames: false
    stopLocalRegistry: false
    createPinnedImageSets: false
    enableInteractiveFlow: false

  tasks:

    - name: Check if required inputs are set
      ansible.builtin.assert:
        that:
          - release_image_name is defined

    - name: Set facts for Appliance Bundle Types
      when: appliance_bundle_type is defined
      block:
        - name: Transform variables based on bundle type - virt
          when: appliance_bundle_type == 'virt'
          ansible.builtin.set_fact:
            operators:
              - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.19
                packages:
                  - name: local-storage-operator
                  - name: metallb-operator
                  - name: mtv-operator
                  - name: ocs-client-operator
                  - name: odf-operator
                  - name: redhat-oadp-operator
                  - name: kubevirt-hyperconverged
                  - name: fence-agents-remediation
                  - name: node-maintenance-operator
                  - name: rhacs-operator
                  - name: openshift-gitops-operator

        - name: Transform variables based on bundle type - management
          when: appliance_bundle_type == 'management'
          ansible.builtin.set_fact:
            operators:
              - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.19
                packages:
                  - name: advanced-cluster-management
                  - name: multicluster-engine
                  - name: ansible-automation-platform-operator
                  - name: cincinnati-operator
                  - name: openshift-gitops-operator
                  - name: openshift-pipelines-operator-rh
                  - name: rhacs-operator
                  - name: local-storage-operator
                  - name: metallb-operator
                  - name: ocs-client-operator
                  - name: odf-operator
                  - name: redhat-oadp-operator
                  - name: kubevirt-hyperconverged
                  - name: fence-agents-remediation
                  - name: node-maintenance-operator

        - name: Transform variables based on bundle type - sno
          when: appliance_bundle_type == 'sno'
          ansible.builtin.set_fact:
            operators:
              - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.19
                packages:
                  - name: openshift-gitops-operator
                  - name: rhacs-operator
                  - name: lvms-operator
                  - name: metallb-operator
                  - name: redhat-oadp-operator
                  - name: kubevirt-hyperconverged
                  - name: fence-agents-remediation
                  - name: node-maintenance-operator

    - name: Read in the pull secret if it is defined as a file
      when: pull_secret_path is defined
      ansible.builtin.shell:
        cmd: "cat {{ pull_secret_path }}"
      register: pull_secret_content
      no_log: true

    #- name: Set the pull secret content
    #  when: pull_secret_content is defined
    #  ansible.builtin.set_fact:
    #    pullSecret: "{{ pull_secret_content.stdout | trim }}"

    - name: Create working directories - Container Graph
      ansible.builtin.file:
        state: directory
        path: "{{ appliance_graph_path }}"

    - name: Create working directories - Appliance Base Path
      ansible.builtin.file:
        state: directory
        path: "{{ appliance_base_path }}"

    - name: Set the general facts
      ansible.builtin.set_fact:
        appliance_asset_path: "{{ appliance_base_path }}/{{ release_image_name }}/assets"
        output_appliance_config_path: "{{ appliance_base_path }}/{{ release_image_name }}/assets/appliance-config.yaml"

    - name: Create working directories - Appliance Base Path - Release Image
      ansible.builtin.file:
        state: directory
        path: "{{ appliance_base_path }}/{{ release_image_name }}"

    - name: Create working directories - Appliance Asset Path
      ansible.builtin.file:
        state: directory
        path: "{{ appliance_asset_path }}"

    - name: Create Configuration
      ansible.builtin.include_tasks:
        file: tasks/template-appliance-config.yaml

    - name: Build Appliance image
      ansible.builtin.include_tasks:
        file: tasks/build-appliance-image.yaml

    - name: Convert raw to ISO
      ansible.builtin.include_tasks:
        file: tasks/convert-raw-to-iso.yaml

    - name: Pass along information about the appliance build to the next Playbook in the Workflow
      ansible.builtin.set_stats: 
        data:
          release_image_name: "{{ release_image_name }}"
          appliance_asset_path: "{{ appliance_asset_path }}"
          appliance_config_path: "{{ appliance_asset_path }}/appliance-config.yaml"
          appliance_image_iso_path: "{{ appliance_asset_path }}/appliance.iso"
          appliance_image_raw_path: "{{ appliance_asset_path }}/appliance.raw"
          openshift_version: "{{ openshift_version }}"
